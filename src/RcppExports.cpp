// Generated by using Rcpp::compileAttributes() -> do not edit by hand
// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393

#include <RcppArmadillo.h>
#include <Rcpp.h>

using namespace Rcpp;

// T_optimal
arma::rowvec T_optimal(SEXP xt, SEXP xr);
RcppExport SEXP DiscrimOD_T_optimal(SEXP xtSEXP, SEXP xrSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< SEXP >::type xt(xtSEXP);
    Rcpp::traits::input_parameter< SEXP >::type xr(xrSEXP);
    rcpp_result_gen = Rcpp::wrap(T_optimal(xt, xr));
    return rcpp_result_gen;
END_RCPP
}
// KL_normal_hetero
arma::rowvec KL_normal_hetero(SEXP xt, SEXP xr);
RcppExport SEXP DiscrimOD_KL_normal_hetero(SEXP xtSEXP, SEXP xrSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< SEXP >::type xt(xtSEXP);
    Rcpp::traits::input_parameter< SEXP >::type xr(xrSEXP);
    rcpp_result_gen = Rcpp::wrap(KL_normal_hetero(xt, xr));
    return rcpp_result_gen;
END_RCPP
}
// KL_logistic
arma::rowvec KL_logistic(SEXP xt, SEXP xr);
RcppExport SEXP DiscrimOD_KL_logistic(SEXP xtSEXP, SEXP xrSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< SEXP >::type xt(xtSEXP);
    Rcpp::traits::input_parameter< SEXP >::type xr(xrSEXP);
    rcpp_result_gen = Rcpp::wrap(KL_logistic(xt, xr));
    return rcpp_result_gen;
END_RCPP
}
// KL_lognormal_a
arma::rowvec KL_lognormal_a(SEXP xt, SEXP xr);
RcppExport SEXP DiscrimOD_KL_lognormal_a(SEXP xtSEXP, SEXP xrSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< SEXP >::type xt(xtSEXP);
    Rcpp::traits::input_parameter< SEXP >::type xr(xrSEXP);
    rcpp_result_gen = Rcpp::wrap(KL_lognormal_a(xt, xr));
    return rcpp_result_gen;
END_RCPP
}
// KL_lognormal_b
arma::rowvec KL_lognormal_b(SEXP xt, SEXP xr);
RcppExport SEXP DiscrimOD_KL_lognormal_b(SEXP xtSEXP, SEXP xrSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< SEXP >::type xt(xtSEXP);
    Rcpp::traits::input_parameter< SEXP >::type xr(xrSEXP);
    rcpp_result_gen = Rcpp::wrap(KL_lognormal_b(xt, xr));
    return rcpp_result_gen;
END_RCPP
}
// KL_lognormal_c
arma::rowvec KL_lognormal_c(SEXP xt, SEXP xr);
RcppExport SEXP DiscrimOD_KL_lognormal_c(SEXP xtSEXP, SEXP xrSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< SEXP >::type xt(xtSEXP);
    Rcpp::traits::input_parameter< SEXP >::type xr(xrSEXP);
    rcpp_result_gen = Rcpp::wrap(KL_lognormal_c(xt, xr));
    return rcpp_result_gen;
END_RCPP
}
// KL_gamma_b
arma::rowvec KL_gamma_b(SEXP xt, SEXP xr);
RcppExport SEXP DiscrimOD_KL_gamma_b(SEXP xtSEXP, SEXP xrSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< SEXP >::type xt(xtSEXP);
    Rcpp::traits::input_parameter< SEXP >::type xr(xrSEXP);
    rcpp_result_gen = Rcpp::wrap(KL_gamma_b(xt, xr));
    return rcpp_result_gen;
END_RCPP
}
// cppPSO
Rcpp::List cppPSO(const int LOOPID, Rcpp::List ALG_INFO_LIST, Rcpp::List OBJ_INFO_LIST, Rcpp::List MODEL_INFO_LIST, arma::rowvec FIXEDVALUE, const SEXP env, const bool IF_PARALLEL, const bool VERBOSE);
RcppExport SEXP DiscrimOD_cppPSO(SEXP LOOPIDSEXP, SEXP ALG_INFO_LISTSEXP, SEXP OBJ_INFO_LISTSEXP, SEXP MODEL_INFO_LISTSEXP, SEXP FIXEDVALUESEXP, SEXP envSEXP, SEXP IF_PARALLELSEXP, SEXP VERBOSESEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const int >::type LOOPID(LOOPIDSEXP);
    Rcpp::traits::input_parameter< Rcpp::List >::type ALG_INFO_LIST(ALG_INFO_LISTSEXP);
    Rcpp::traits::input_parameter< Rcpp::List >::type OBJ_INFO_LIST(OBJ_INFO_LISTSEXP);
    Rcpp::traits::input_parameter< Rcpp::List >::type MODEL_INFO_LIST(MODEL_INFO_LISTSEXP);
    Rcpp::traits::input_parameter< arma::rowvec >::type FIXEDVALUE(FIXEDVALUESEXP);
    Rcpp::traits::input_parameter< const SEXP >::type env(envSEXP);
    Rcpp::traits::input_parameter< const bool >::type IF_PARALLEL(IF_PARALLELSEXP);
    Rcpp::traits::input_parameter< const bool >::type VERBOSE(VERBOSESEXP);
    rcpp_result_gen = Rcpp::wrap(cppPSO(LOOPID, ALG_INFO_LIST, OBJ_INFO_LIST, MODEL_INFO_LIST, FIXEDVALUE, env, IF_PARALLEL, VERBOSE));
    return rcpp_result_gen;
END_RCPP
}
// cppDesignCriterion
Rcpp::List cppDesignCriterion(Rcpp::List ALG_INFO_LIST, Rcpp::List OBJ_INFO_LIST, Rcpp::List MODEL_INFO_LIST, arma::rowvec FIXEDVALUE, SEXP env, arma::rowvec DESIGN);
RcppExport SEXP DiscrimOD_cppDesignCriterion(SEXP ALG_INFO_LISTSEXP, SEXP OBJ_INFO_LISTSEXP, SEXP MODEL_INFO_LISTSEXP, SEXP FIXEDVALUESEXP, SEXP envSEXP, SEXP DESIGNSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::List >::type ALG_INFO_LIST(ALG_INFO_LISTSEXP);
    Rcpp::traits::input_parameter< Rcpp::List >::type OBJ_INFO_LIST(OBJ_INFO_LISTSEXP);
    Rcpp::traits::input_parameter< Rcpp::List >::type MODEL_INFO_LIST(MODEL_INFO_LISTSEXP);
    Rcpp::traits::input_parameter< arma::rowvec >::type FIXEDVALUE(FIXEDVALUESEXP);
    Rcpp::traits::input_parameter< SEXP >::type env(envSEXP);
    Rcpp::traits::input_parameter< arma::rowvec >::type DESIGN(DESIGNSEXP);
    rcpp_result_gen = Rcpp::wrap(cppDesignCriterion(ALG_INFO_LIST, OBJ_INFO_LIST, MODEL_INFO_LIST, FIXEDVALUE, env, DESIGN));
    return rcpp_result_gen;
END_RCPP
}
// cppEquivalence
List cppEquivalence(Rcpp::List ALG_INFO_LIST, Rcpp::List OBJ_INFO_LIST, Rcpp::List MODEL_INFO_LIST, const double GBEST_VAL, const arma::mat PARA_SET, const arma::rowvec alpha, const SEXP env, const int nGrid);
RcppExport SEXP DiscrimOD_cppEquivalence(SEXP ALG_INFO_LISTSEXP, SEXP OBJ_INFO_LISTSEXP, SEXP MODEL_INFO_LISTSEXP, SEXP GBEST_VALSEXP, SEXP PARA_SETSEXP, SEXP alphaSEXP, SEXP envSEXP, SEXP nGridSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::List >::type ALG_INFO_LIST(ALG_INFO_LISTSEXP);
    Rcpp::traits::input_parameter< Rcpp::List >::type OBJ_INFO_LIST(OBJ_INFO_LISTSEXP);
    Rcpp::traits::input_parameter< Rcpp::List >::type MODEL_INFO_LIST(MODEL_INFO_LISTSEXP);
    Rcpp::traits::input_parameter< const double >::type GBEST_VAL(GBEST_VALSEXP);
    Rcpp::traits::input_parameter< const arma::mat >::type PARA_SET(PARA_SETSEXP);
    Rcpp::traits::input_parameter< const arma::rowvec >::type alpha(alphaSEXP);
    Rcpp::traits::input_parameter< const SEXP >::type env(envSEXP);
    Rcpp::traits::input_parameter< const int >::type nGrid(nGridSEXP);
    rcpp_result_gen = Rcpp::wrap(cppEquivalence(ALG_INFO_LIST, OBJ_INFO_LIST, MODEL_INFO_LIST, GBEST_VAL, PARA_SET, alpha, env, nGrid));
    return rcpp_result_gen;
END_RCPP
}

static const R_CallMethodDef CallEntries[] = {
    {"DiscrimOD_T_optimal", (DL_FUNC) &DiscrimOD_T_optimal, 2},
    {"DiscrimOD_KL_normal_hetero", (DL_FUNC) &DiscrimOD_KL_normal_hetero, 2},
    {"DiscrimOD_KL_logistic", (DL_FUNC) &DiscrimOD_KL_logistic, 2},
    {"DiscrimOD_KL_lognormal_a", (DL_FUNC) &DiscrimOD_KL_lognormal_a, 2},
    {"DiscrimOD_KL_lognormal_b", (DL_FUNC) &DiscrimOD_KL_lognormal_b, 2},
    {"DiscrimOD_KL_lognormal_c", (DL_FUNC) &DiscrimOD_KL_lognormal_c, 2},
    {"DiscrimOD_KL_gamma_b", (DL_FUNC) &DiscrimOD_KL_gamma_b, 2},
    {"DiscrimOD_cppPSO", (DL_FUNC) &DiscrimOD_cppPSO, 8},
    {"DiscrimOD_cppDesignCriterion", (DL_FUNC) &DiscrimOD_cppDesignCriterion, 6},
    {"DiscrimOD_cppEquivalence", (DL_FUNC) &DiscrimOD_cppEquivalence, 8},
    {NULL, NULL, 0}
};

RcppExport void R_init_DiscrimOD(DllInfo *dll) {
    R_registerRoutines(dll, NULL, CallEntries, NULL, NULL);
    R_useDynamicSymbols(dll, FALSE);
}
